apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "charts.konghq.com/v1alpha1",
          "kind": "Kong",
          "metadata": {
            "name": "example-kong"
          },
          "spec": {
            "admin": {
              "annotations": {},
              "enabled": false,
              "http": {
                "containerPort": 8001,
                "enabled": false,
                "parameters": [],
                "servicePort": 8001
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hostname": null,
                "ingressClassName": null,
                "path": "/"
              },
              "labels": {},
              "tls": {
                "containerPort": 8444,
                "enabled": true,
                "parameters": [
                  "http2"
                ],
                "servicePort": 8444
              },
              "type": "NodePort"
            },
            "autoscaling": {
              "enabled": false,
              "maxReplicas": 5,
              "metrics": [
                {
                  "resource": {
                    "name": "cpu",
                    "target": {
                      "averageUtilization": 80,
                      "type": "Utilization"
                    }
                  },
                  "type": "Resource"
                }
              ],
              "minReplicas": 2,
              "targetCPUUtilizationPercentage": null
            },
            "cluster": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "tls": {
                "containerPort": 8005,
                "enabled": false,
                "parameters": [],
                "servicePort": 8005
              },
              "type": "ClusterIP"
            },
            "clustertelemetry": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "tls": {
                "containerPort": 8006,
                "enabled": false,
                "parameters": [],
                "servicePort": 8006
              },
              "type": "ClusterIP"
            },
            "containerSecurityContext": {},
            "dblessConfig": {
              "config": "_format_version: \"1.1\"\nservices:\n  # Example configuration\n  # - name: example.com\n  #   url: http://example.com\n  #   routes:\n  #   - name: example\n  #     paths:\n  #     - \"/example\"\n",
              "configMap": ""
            },
            "deployment": {
              "daemonset": false,
              "kong": {
                "enabled": true
              },
              "serviceAccount": {
                "create": true
              },
              "test": {
                "enabled": false
              }
            },
            "deploymentAnnotations": {
              "kuma.io/gateway": "enabled",
              "traffic.sidecar.istio.io/includeInboundPorts": ""
            },
            "enterprise": {
              "enabled": false,
              "portal": {
                "enabled": false
              },
              "rbac": {
                "admin_gui_auth": "basic-auth",
                "admin_gui_auth_conf_secret": "CHANGEME-admin-gui-auth-conf-secret",
                "enabled": false,
                "session_conf_secret": "kong-session-config"
              },
              "smtp": {
                "admin_emails_from": "none@example.com",
                "admin_emails_reply_to": "none@example.com",
                "auth": {
                  "smtp_password_secret": "CHANGEME-smtp-password",
                  "smtp_username": ""
                },
                "enabled": false,
                "portal_emails_from": "none@example.com",
                "portal_emails_reply_to": "none@example.com",
                "smtp_admin_emails": "none@example.com",
                "smtp_auth_type": "",
                "smtp_host": "smtp.example.com",
                "smtp_port": 587,
                "smtp_ssl": "nil",
                "smtp_starttls": true
              },
              "vitals": {
                "enabled": true
              }
            },
            "env": {
              "admin_access_log": "/dev/stdout",
              "admin_error_log": "/dev/stderr",
              "admin_gui_access_log": "/dev/stdout",
              "admin_gui_error_log": "/dev/stderr",
              "database": "off",
              "nginx_worker_processes": "2",
              "portal_api_access_log": "/dev/stdout",
              "portal_api_error_log": "/dev/stderr",
              "prefix": "/kong_prefix/",
              "proxy_access_log": "/dev/stdout",
              "proxy_error_log": "/dev/stderr"
            },
            "extraConfigMaps": [],
            "extraLabels": {},
            "extraSecrets": [],
            "image": {
              "pullPolicy": "IfNotPresent",
              "repository": "kong",
              "tag": "2.5"
            },
            "ingressController": {
              "admissionWebhook": {
                "certificate": {
                  "provided": false
                },
                "enabled": false,
                "failurePolicy": "Fail",
                "port": 8080
              },
              "args": [],
              "enabled": true,
              "env": {
                "kong_admin_tls_skip_verify": true
              },
              "image": {
                "effectiveSemver": null,
                "repository": "kong/kubernetes-ingress-controller",
                "tag": "2.0"
              },
              "ingressClass": "kong",
              "ingressClassAnnotations": {},
              "livenessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "rbac": {
                "create": true
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "resources": {},
              "watchNamespaces": []
            },
            "lifecycle": {
              "preStop": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "/bin/sleep 15 \u0026\u0026 kong quit"
                  ]
                }
              }
            },
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/status",
                "port": "status",
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 5
            },
            "manager": {
              "annotations": {},
              "enabled": true,
              "http": {
                "containerPort": 8002,
                "enabled": true,
                "parameters": [],
                "servicePort": 8002
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hostname": null,
                "ingressClassName": null,
                "path": "/"
              },
              "labels": {},
              "tls": {
                "containerPort": 8445,
                "enabled": true,
                "parameters": [
                  "http2"
                ],
                "servicePort": 8445
              },
              "type": "NodePort"
            },
            "migrations": {
              "annotations": {
                "sidecar.istio.io/inject": false
              },
              "backoffLimit": null,
              "jobAnnotations": {},
              "postUpgrade": true,
              "preUpgrade": true,
              "resources": {}
            },
            "nodeSelector": {},
            "plugins": {},
            "podAnnotations": {},
            "podDisruptionBudget": {
              "enabled": false
            },
            "podLabels": {},
            "podSecurityPolicy": {
              "enabled": false,
              "spec": {
                "allowPrivilegeEscalation": false,
                "fsGroup": {
                  "rule": "RunAsAny"
                },
                "hostIPC": false,
                "hostNetwork": false,
                "hostPID": false,
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsGroup": {
                  "rule": "RunAsAny"
                },
                "runAsUser": {
                  "rule": "RunAsAny"
                },
                "seLinux": {
                  "rule": "RunAsAny"
                },
                "supplementalGroups": {
                  "rule": "RunAsAny"
                },
                "volumes": [
                  "configMap",
                  "secret",
                  "emptyDir"
                ]
              }
            },
            "portal": {
              "annotations": {},
              "enabled": true,
              "http": {
                "containerPort": 8003,
                "enabled": true,
                "parameters": [],
                "servicePort": 8003
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hostname": null,
                "ingressClassName": null,
                "path": "/"
              },
              "labels": {},
              "tls": {
                "containerPort": 8446,
                "enabled": true,
                "parameters": [
                  "http2"
                ],
                "servicePort": 8446
              },
              "type": "NodePort"
            },
            "portalapi": {
              "annotations": {},
              "enabled": true,
              "http": {
                "containerPort": 8004,
                "enabled": true,
                "parameters": [],
                "servicePort": 8004
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hostname": null,
                "ingressClassName": null,
                "path": "/"
              },
              "labels": {},
              "tls": {
                "containerPort": 8447,
                "enabled": true,
                "parameters": [
                  "http2"
                ],
                "servicePort": 8447
              },
              "type": "NodePort"
            },
            "postgresql": {
              "enabled": false
            },
            "priorityClassName": "",
            "proxy": {
              "annotations": {},
              "enabled": true,
              "http": {
                "containerPort": 8000,
                "enabled": true,
                "parameters": [],
                "servicePort": 80
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hostname": null,
                "ingressClassName": null,
                "path": "/"
              },
              "labels": {
                "enable-metrics": "true"
              },
              "stream": {},
              "tls": {
                "containerPort": 8443,
                "enabled": true,
                "parameters": [
                  "http2"
                ],
                "servicePort": 443
              },
              "type": "LoadBalancer"
            },
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/status",
                "port": "status",
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 5
            },
            "replicaCount": 1,
            "resources": {},
            "secretVolumes": [],
            "securityContext": {},
            "serviceMonitor": {
              "enabled": false
            },
            "status": {
              "enabled": true,
              "http": {
                "containerPort": 8100,
                "enabled": true,
                "parameters": []
              },
              "tls": {
                "containerPort": 8543,
                "enabled": false,
                "parameters": []
              }
            },
            "terminationGracePeriodSeconds": 30,
            "tolerations": [],
            "udpProxy": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "stream": {},
              "type": "LoadBalancer"
            },
            "updateStrategy": {},
            "waitImage": {
              "enabled": true,
              "pullPolicy": "IfNotPresent"
            }
          }
        }
      ]
    capabilities: Basic Install
    operators.operatorframework.io/builder: operator-sdk-v1.12.0+git
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: kong-operator.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Kong
      name: kongs.charts.konghq.com
      version: v1alpha1
  description: The world’s most popular open source API gateway. Built for multi-cloud
    and hybrid, optimized for microservices and distributed architectures.
  displayName: Kong Operator
  icon:
  - base64data: ""
    mediatype: ""
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - security.openshift.io
          resourceNames:
          - anyuid
          resources:
          - securitycontextconstraints
          verbs:
          - use
        - apiGroups:
          - extensions
          resources:
          - ingresses
          verbs:
          - '*'
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          - ingressclasses
          verbs:
          - '*'
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - clusterroles
          - roles
          - clusterrolebindings
          - rolebindings
          verbs:
          - '*'
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - '*'
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          - serviceaccounts
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - charts.konghq.com
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: kong-operator-controller-manager
      deployments:
      - name: kong-operator-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=10
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources: {}
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=kong-operator
                image: registry.connect.redhat.com/kong/kong-operator1:v0.10.0-certified
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 200m
                    memory: 100Mi
                  requests:
                    cpu: 100m
                    memory: 60Mi
                securityContext:
                  allowPrivilegeEscalation: false
              securityContext:
                runAsNonRoot: true
              serviceAccountName: kong-operator-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: kong-operator-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - kong
  - ingress
  - controller
  - microservices
  - kubernetes
  - gateway
  - api
  - management
  links:
  - name: Kong Operator
    url: https://kong-operator.domain
  maintainers:
  - email: michal.flendrich@konghq.com
    name: Michal
  - email: traines@konghq.com
    name: Travis
  - email: shane.utt@konghq.com
    name: Shane
  maturity: alpha
  provider:
    name: Kong Inc.
    url: https://konghq.com/
  version: 0.0.1
